public struct Data<'a, T>:
    where:
        Behavior<T>
        T: 'static

    public Package: T
    public Address: Business::Logic<T>

public function SomeFunction<T>(
    a: int32,
    b: Data<float64>
) -> int32:
    where:
        SomeTrait<T>
        AnotherTrait<T>

    let mutable thisIsVariableDeclaration = (
        self.Iterator()
            .Map((x) => x * 2)
            .Filter((x) => x > 10)
            .Collect()
    )

    let mutable anotherVariableDeclaration = if (
        32 + 64 > 61256 and another == 0 or self.IsSome()
    ):
        express SomeCalculation()
    else: 'label
        let x = 32
        let y = 64
        express 'label SomeOtherCalculation(x, y)

    let test = scope: 'label
        let someExtraVariable = 32
        let resultOf = SomeCrazyMathematicalCalculation(someExtraVariable)
        if resultOf > 0:
            express: 'label SomeCalculation()
        else:
            express: 'label SomeOtherCalculation()

    match yourMom:
        case (SomeEnum::Crazy(inner)):
            express: 'label SomeCalculation()
        case (any):
            panic!("Oh no!")