public trait TupleLength<T> {
    function length(): usize;
}

implements TupleLength<()> {
    function legnth(): usize {
        return 0;
    }
}

const implements<T, Ts> TupleLength<(T, ...Ts)>
where: 
    const TupleLength<Ts>
{
    function length(): usize {
        return 1 + TupleLength:<Ts>::length();
    }
}

function main() {
    let a = TupleLength:<(int32, uint32)>::length(); // 2
    let b = TupleLength:<(int32, uint32, int32)>::length(); // 3
}
