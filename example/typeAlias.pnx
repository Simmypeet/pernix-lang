public trait RemoveReference<T> {
    type Output;
}

implements<T> RemoveReference<&T> {
    type Output = T;
}

implements<T> RemoveReference<&mutable T> {
    type Output = T;
}

implements<T> RemoveReference<&restrict T> {
    type Output = T;
}

implements<T> RemoveReference<T> {
    type Output = T;
}

public trait Ident<T> {
    type Output;
}

implements<T, U> Ident<(T, U)> 
where:
    Ident<T>, Ident<U>
{
    type Output = (Ident<T>::Output, Ident<U>::Output);
}

private function appendLonger(
    first: &mutable local String, 
    second: &mutable local String
) {
}

private function test() {
    appendLonger(firstRef, secondRef);
}
