public function expect[T](..: T):
    pass


public function pointerArithmetic(a: *int32):
    expect[*..](a + 1)
    expect[*..](a + 1.2) # error, expect isize
    

public function numericArithmetic(a: int32, b: bool):
    expect[int32](a + 1)
    expect[int32](a + 1.2) # error, expect int32
    expect[int32](a + true) # error, expect int32
    expect[int32](a + 1i64) # error, expect int32

    expect[bool](b - false) # error, bool is not numeric


public struct Adt:
    pass


public function comparison(a: int32, b: bool):
    expect[bool](a < 1)
    expect[bool](a < 1.2) # error, expect int32
    expect[bool](a < true) # error, expect int32
    expect[bool](a < 1i64) # error, expect int32

    expect[bool](b <= false) # fine
    
    expect[bool](Adt{} == Adt{}) # error, adt is not comparable


public function bitwiseAndOrXor():
    expect[int32](1 & 2)
    expect[int32](1 & 2.0) # error, expect int32
    expect[int32](1 & true) # error, expect int32
    expect[int32](1 & 2i64) # error, expect int32

    expect[float32](1.0 | 2.0) # error, float can't be used


public function bitshift():
    expect[int32](1 << 2)
    expect[int32](1 << -2) # error, negative shift
    expect[int32](1i32 << 2.0) # error
    expect[int32](1 << true) # error 
    expect[int32](1 << 2i64) # error, expect unsigned

    expect[float32](1.0 >> 2) # error, non-integer lhs