from core import Copy, Drop

public struct Vector[T]:
	private x: phantom T


implements[T] Vector[T]:
	public function new() -> this:
		return this { x: phantom }


	public function push['a](self: &'a mut this, value: T):
        where:
            T: 'a


public trait DoSomething['a, T]:
	public type Output

	public function doSomething['b](
		self: &'b mut T, 
		object: &'a mut int32
	):
        where:
            T: 'b


implements['a, 'c] DoSomething['a, Vector[&'c mut int32]]:
    where:
        'a: 'c

	type Output = int32

	function doSomething['b](
		self: &'b mut Vector[&'c mut int32], 
		object: &'a mut int32
	):
        where:
            Vector[&'c mut int32]: 'b 

        self.push(object)


public function use['a, T](object: &'a mut T):
    where:
        trait for['x] DoSomething['x, T]
        T: 'a

	let mut number = 32
	
    # Call the method twice with the same mutable reference
    DoSomething::doSomething(object, &mut number)
    DoSomething::doSomething(object, &mut number)


public function main():
	let mut vector = Vector[&mut int32]::new()

	use(&mut vector)