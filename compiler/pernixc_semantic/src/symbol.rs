//! Contains the code related to the symbol resolution pass of the compiler.

use std::{fmt::Debug, hash::Hash, sync::atomic::AtomicU64};

pub mod errors;
pub mod item;
pub mod ty;

/// Is a unique identifier used for various purposes in the compiler.
///
/// All the [`Uid`] generated by this struct are guaranteed to be unique from each other.
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Uid(u64);

impl Uid {
    /// Generates a new [`Uid`] that is guaranteed to be unique from any others generated by this
    /// function.
    pub fn fresh() -> Self {
        // use u64 atomic counter
        static COUNTER: AtomicU64 = AtomicU64::new(0);

        Self(COUNTER.fetch_add(1, std::sync::atomic::Ordering::Relaxed))
    }

    /// Gets the underlying [`u64`] representation of the [`Uid`].
    #[must_use]
    pub fn as_u64(&self) -> u64 { self.0 }
}

/// Is a trait for types that can generate a new unique identifier.
pub trait UniqueIdentifier:
    Debug + Clone + Copy + PartialEq + Eq + PartialOrd + Ord + Hash
{
    /// Generates a new unique identifier that is guaranteed to be unique from any others generated
    fn fresh() -> Self
    where
        Self: Sized;
}

impl UniqueIdentifier for Uid {
    fn fresh() -> Self { Self::fresh() }
}
