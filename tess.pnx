using std::collections::List;
using std::cell;

public struct List {
    private numbers: Cell<List<int32>>,
}

implements List {
    public function add(this: &mutable List, value: int32) {
        this->numbers.visitRestrict(\{
            $0->append(value)
        })
    }

    public function average(this: &List): int32 {
        return this->numbers.visit(\{
            let mutable sum = 0;

            for (number: $0) {
                sum += *number;
            }

            return sum / $0->length();
        });
    }
}

function main() {
    let mutable numbers = List::new();
    let times = stdin.readLine().parse:<int32>().unwrap();

    for (i: range(0, times)) {
        let number = stdin.readLine().parse:<int32>().unwrap();
        numbers.add(number);
    }
}